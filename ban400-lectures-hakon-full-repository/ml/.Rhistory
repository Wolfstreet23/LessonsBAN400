knitr::opts_chunk$set(echo = TRUE)
library(localgaussSpec)
library(ggplot2)
library(patchwork)
data(dmbp)
dmbp <- dmbp[, "V1"]
## Create pseudo-normal observations from `dmbp`.
dmbp_pn <- qnorm(p = (rank(dmbp) - 0.5) /length(dmbp))
dmbp_original_plot <- ggplot(
data = data.frame(
x = seq_along(dmbp),
y = dmbp),
mapping = aes(x = x, y = y)) +
geom_line(
mapping = aes(x = x, y = y),
lwd = 0.1,
alpha = 0.6) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
annotate(geom = "text",
x = -Inf,
y = Inf,
size = 3,
label = "original dmbp",
col = "brown",
alpha = 1,
vjust = 1.3,
hjust = -0.1) +
theme(axis.ticks = element_line(size = 0.25),
axis.ticks.length = unit(.04, "cm"),
axis.text = element_text(size = 4.5))
dmbp_pn_plot <- ggplot(
data = data.frame(
x = seq_along(dmbp_pn),
y = dmbp_pn),
mapping = aes(x = x, y = y)) +
geom_line(
mapping = aes(x = x, y = y),
lwd = 0.1,
alpha = 0.6) +
theme(axis.title.x = element_blank(),
axis.title.y = element_blank()) +
annotate(geom = "text",
x = -Inf,
y = Inf,
size = 3,
label = "pseduo-normal dmbp",
col = "brown",
alpha = 1,
vjust = 1.3,
hjust = -0.1) +
theme(axis.ticks = element_line(size = 0.25),
axis.ticks.length = unit(.04, "cm"),
axis.text = element_text(size = 4.5))
dmbp_original_plot / dmbp_pn_plot
main_dir <- c("~", "OneDrive - Norges Handelshøyskole", "prosjekt", "2021",
"13-entropy-paper", "P1_fig_04.D8")
## Note that 'main_dir' only contains the specification of the
## in-hierarchy part of the required path, and this path is stored as
## a vector.  The reason for this is that it should be possible to
## move the storage directory 'main_dir' to another location on your
## computer, or even move it to a computer using another OS than the
## one used for the original computation.
###----------------------------------------------------------------###
## Access the 'dmbp'-data from the 'localgaussSpec'-pakcage (this is a
## copy of the data in the 'rugarch'-package.)
data(dmbp)
.TS <- dmbp[, "V1"]
rm(dmbp)
##  Save to file and update file-hierarchy.
set.seed(136)
.TS_LG_object <- TS_LG_object(
TS_data = .TS,
main_dir = main_dir)
rm(.TS, main_dir)
.LG_type <- c("par_five", "par_one")
.LG_points <- LG_select_points(
.P1 = c(0.1, 0.1),
.P2 = c(0.9, 0.9),
.shape = c(3, 0))
lag_max <- 200
.b <- c(0.5, 0.75, 1)
##  Do the main computation.
LG_AS <- LG_approx_scribe(
main_dir = .TS_LG_object$TS_info$main_dir,
data_dir = .TS_LG_object$TS_info$save_dir,
TS = .TS_LG_object$TS_info$TS,
lag_max = lag_max,
LG_points = .LG_points,
.bws_fixed = .b,
.bws_fixed_only = TRUE,
LG_type = .LG_type)
rm(.TS_LG_object, lag_max, .LG_points, .b, .LG_type)
..main_dir <- c("~", "OneDrive - Norges Handelshøyskole", "prosjekt", "2021",
"13-entropy-paper", "P1_fig_04.D8")
..TS <- "0fb42549ce13fce773c12b77463bdca8"
..Approx <- "Approx__1"
..plot <- list()
##  Loop over the desired vertical levels 1,2,3.  If the underlying
##  script in the file "2_Data.R" has not been modified, then this
##  should select diagonal points corresponding to the lower tail,
##  center and upper tail.
.names <- c("lower.tail", "center", "upper.tail")
..line.size <- 0.1
for (.point in 1:3) {
.name <- .names[.point]
##  Specify input values for the selected point.
.input <-
list(TCS_type = "C",
window = "Tukey",
Boot_Approx = "Nothing here to select",
confidence_interval = "95",
levels_Diagonal = .point,
bw_points = "0.5",
cut = 10L,
frequency_range = c(0, 0.5),
type = "par_five",
levels_Horizontal = 2,
TS = ..TS,
S_type = "LS_a",
levels_Line = 2,
point_type = "on_diag",
Approx = ..Approx,
Vi = "Y",
Vj = "Y",
levels_Vertical = 2,
global_local = "local",
drop_annotation = TRUE)
..plot[[.name]] <- LG_plot_helper(
main_dir = ..main_dir,
input = .input,
input_curlicues= list(
NC_value = list(
short_or_long_label = "short"),
spectra_plot = list(
WN_line  = list(
size = ..line.size),
global = list(
line.size = ..line.size),
local = list(
line.size = ..line.size))))
}
rm(.point, .name, .names, .input, ..line.size)
.range_list <- lapply(
X = ..plot,
FUN = function(x) {
range(x$data$orig)
})
.range <- range(.range_list)
for (i in seq_along(..plot))
..plot[[i]]$coordinates$limits$y <- .range
rm(.range, i, .range_list)
..plot[[1]] / ..plot[[2]] / ..plot[[3]]
library(tidyverse)
library(lg)
ts <- dmbp_pn
order <- 1
dat <-
tibble(X1 = ts) %>%
mutate(X2 = lag(X1))
dat
lg_object <- lg_main(dat,
transform_to_marginal_normality = TRUE,
est_method = "5par")
lg_object
?ind_test
test_result <- ind_test(lg_object, n_rep = 50)
test_result <- ind_test(lg_object, n_rep = 2)
test_result
test_result <- ind_test(lg_object, n_rep = 5)
test_result
i=1
varname <- paste0("lag", order)
dat <-
tibble(X1 = ts) %>%
mutate(X2 = lag(X1, n = order))
dat <-
tibble(X1 = ts) %>%
mutate(X2 = lag(X1))
if(order > 1) {
for(i in 1:(order - 1)) {
varname <- paste0("lag", order)
dat <- dat %>%
mutate(!!varname := lag(X1, n = i))
}
}
dat
order <- 2
if(order > 1) {
for(i in 1:(order - 1)) {
varname <- paste0("lag", order)
dat <- dat %>%
mutate(!!varname := lag(X1, n = i))
}
}
dat
dat <-
tibble(X1 = ts) %>%
mutate(X2 = lag(X1), n = order)
if(order > 1) {
for(i in 1:(order - 1)) {
varname <- paste0("lag", order)
dat <- dat %>%
mutate(!!varname := lag(X1, n = i))
}
}
dat
dat <-
tibble(X1 = ts) %>%
mutate(X2 = lag(X1 n = order))
dat <-
tibble(X1 = ts) %>%
mutate(X2 = lag(X1, n = order))
if(order > 1) {
for(i in 1:(order - 1)) {
varname <- paste0("lag", order)
dat <- dat %>%
mutate(!!varname := lag(X1, n = i))
}
}
dat
n_rep = 5
test_result <- ci_test(lg_object = lg_object, n_rep = n_rep)
lg_object <- lg_main(dat,
transform_to_marginal_normality = TRUE,
est_method = "1par")
test_result <- ci_test(lg_object = lg_object, n_rep = n_rep)
test_result
test_result$p_value
test_result$observed
test_result$replicated
order
order <- 3
test_result <- ci_test(lg_object = lg_object, n_rep = n_rep)
test_result$p_value
test_result$replicated
test_result$observed
acf(ts)
pacf(ts)
data(dmbp)
.TS <- dmbp <- dmbp[, "V1"]
fit <-  garchFit(~ garch(1,1), data = dmbp, trace = FALSE)
# GARCH-filtrate the time series
library(fGarch)
fit <-  garchFit(~ garch(1,1), data = dmbp, trace = FALSE)
fit
str(fit)
fit@residuals
plot(fit@residuals, type = "l")
dmbp_garchres <- fit@residuals
dmbp_garchres <- tibble(X = fit@residuals)
dmbp <- tibble(raw = dmbp,
garch_res = fit@residuals)
lg_object <- lg_main(dmbp)
lg_object$transformed_data
tibble(lg_object$transformed_data)
tibble(lg_object$transformed_data)
transformed <- tibble(lg_object$transformed_data)
colnames(transformed) <- c("raw_trans", "garch_res_trans")
dmbp <- bind_cols(dmbp, transformed)
dmbp
transformed <- tibble(lg_object$transformed_data)
colnames(transformed)
transformed <- data.frame(lg_object$transformed_data)
transformed
colnames(transformed) <- c("raw_trans", "garch_res_trans")
dmbp <- tibble(raw = dmbp,
garch_res = fit@residuals)
lg_object <- lg_main(dmbp)
transformed <- data.frame(lg_object$transformed_data)
colnames(transformed) <- c("raw_trans", "garch_res_trans")
dmbp <- bind_cols(dmbp, transformed)
dmbp
data(dmbp)
.TS <- dmbp <- dmbp[, "V1"]
# GARCH-filtrate the time series
library(fGarch)
fit <-  garchFit(~ garch(1,1), data = dmbp, trace = FALSE)
dmbp_all <- tibble(raw = dmbp,
garch_res = fit@residuals)
lg_object <- lg_main(dmbp_all)
transformed <- data.frame(lg_object$transformed_data)
colnames(transformed) <- c("raw_trans", "garch_res_trans")
head(transformed)
dmbp_all <- bind_cols(dmbp_all, transformed)
dmbp_all
transformed
plot(transformed)
dmbp_all
dmbp_all <- tibble(raw = dmbp,
garch_res = fit@residuals)
dmbp_all
lg_object <- lg_main(dmbp_all)
lg_object$transformed_data
dmbp
# GARCH-filtrate the time series
library(ruarch)
# GARCH-filtrate the time series
library(rugarch)
garch_spec <- ugarchspec(variance.model = list(garchOrder = c(1,1)),
mean.model = list(armaOrder=c(0,0),include.mean = FALSE),
distribution.model = "std")
garch_fit <-  ugarchfit(spec = garch_spec, data = dmbp,
solver.control=list(trace = 1))
garch_fit
str(garch_fit)
garch_fit@fit@residuals
garch_fit$fit
garch_fit@fit
garch_fit@fit$residuals
dmbp_all <- tibble(raw = dmbp,
garch_res = garch_fit@fit$residuals)
dmbp_all
garch_fit@fit$fitted.values
garch_fit@fit
scatter
library(dplyr)
library(ggplot2)
library(tidymodels)      # <- This is new. Tidyverse take on modeling
no_color <- "#00000020"
yes_color <- "#FF000070"
pred_color <- c("#FFFFFF00", "#AA3333DD")
cutoff <- .5
grid_resolution <- 50
# Read the data
telco <-
readr::read_csv("telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv") %>%
select(Churn, MonthlyCharges, tenure) %>%
mutate(Churn = as.factor(Churn))
# Make a basic scatterplot
scatter <-
telco %>%
ggplot(aes(x = MonthlyCharges, y = tenure, colour = Churn)) +
geom_point() +
xlab("Monthly charges ($)") +
ylab("Tenure (months)") +
scale_color_manual(values=c(no_color, yes_color)) +
theme_classic()
scatter
setwd("~/repos/ban400-lectures/ml")
library(dplyr)
library(ggplot2)
library(tidymodels)      # <- This is new. Tidyverse take on modeling
no_color <- "#00000020"
yes_color <- "#FF000070"
pred_color <- c("#FFFFFF00", "#AA3333DD")
cutoff <- .5
grid_resolution <- 50
# Read the data
telco <-
readr::read_csv("telco-customer-churn/WA_Fn-UseC_-Telco-Customer-Churn.csv") %>%
select(Churn, MonthlyCharges, tenure) %>%
mutate(Churn = as.factor(Churn))
# Make a basic scatterplot
scatter <-
telco %>%
ggplot(aes(x = MonthlyCharges, y = tenure, colour = Churn)) +
geom_point() +
xlab("Monthly charges ($)") +
ylab("Tenure (months)") +
scale_color_manual(values=c(no_color, yes_color)) +
theme_classic()
scatter
ggsave("~/scatter.jpg")
